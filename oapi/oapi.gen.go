// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for TodoStatus.
const (
	TodoStatusDone    TodoStatus = "done"
	TodoStatusOnHold  TodoStatus = "on_hold"
	TodoStatusWorking TodoStatus = "working"
)

// Defines values for GetTodosParamsStatus.
const (
	GetTodosParamsStatusDone    GetTodosParamsStatus = "done"
	GetTodosParamsStatusOnHold  GetTodosParamsStatus = "on_hold"
	GetTodosParamsStatusWorking GetTodosParamsStatus = "working"
)

// Defines values for UpdateTodoFormdataBodyStatus.
const (
	Done    UpdateTodoFormdataBodyStatus = "done"
	OnHold  UpdateTodoFormdataBodyStatus = "on_hold"
	Working UpdateTodoFormdataBodyStatus = "working"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Todo defines model for Todo.
type Todo struct {
	CompletedAt *time.Time         `json:"completed_at,omitempty"`
	CreatedAt   *time.Time         `json:"created_at,omitempty"`
	Id          *int32             `json:"id,omitempty"`
	Status      TodoStatus         `json:"status"`
	Task        string             `json:"task"`
	User        openapi_types.UUID `json:"user"`
}

// TodoStatus defines model for Todo.Status.
type TodoStatus string

// GetTodosParams defines parameters for GetTodos.
type GetTodosParams struct {
	// User ID of the user
	User openapi_types.UUID `form:"user" json:"user"`

	// Status filter todo's by status
	Status *GetTodosParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetTodosParamsStatus defines parameters for GetTodos.
type GetTodosParamsStatus string

// UpdateTodoFormdataBody defines parameters for UpdateTodo.
type UpdateTodoFormdataBody struct {
	Status *UpdateTodoFormdataBodyStatus `form:"status,omitempty" json:"status,omitempty"`
	Task   *string                       `form:"task,omitempty" json:"task,omitempty"`
}

// UpdateTodoFormdataBodyStatus defines parameters for UpdateTodo.
type UpdateTodoFormdataBodyStatus string

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = Todo

// UpdateTodoFormdataRequestBody defines body for UpdateTodo for application/x-www-form-urlencoded ContentType.
type UpdateTodoFormdataRequestBody UpdateTodoFormdataBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTodos request
	GetTodos(ctx context.Context, params *GetTodosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTodoWithBody request with any body
	CreateTodoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTodo(ctx context.Context, body CreateTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTodo request
	DeleteTodo(ctx context.Context, todoId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTodoWithBody request with any body
	UpdateTodoWithBody(ctx context.Context, todoId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTodoWithFormdataBody(ctx context.Context, todoId int32, body UpdateTodoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTodos(ctx context.Context, params *GetTodosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTodosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTodoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTodoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTodo(ctx context.Context, body CreateTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTodoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTodo(ctx context.Context, todoId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTodoRequest(c.Server, todoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTodoWithBody(ctx context.Context, todoId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTodoRequestWithBody(c.Server, todoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTodoWithFormdataBody(ctx context.Context, todoId int32, body UpdateTodoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTodoRequestWithFormdataBody(c.Server, todoId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTodosRequest generates requests for GetTodos
func NewGetTodosRequest(server string, params *GetTodosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTodoRequest calls the generic CreateTodo builder with application/json body
func NewCreateTodoRequest(server string, body CreateTodoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTodoRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTodoRequestWithBody generates requests for CreateTodo with any type of body
func NewCreateTodoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTodoRequest generates requests for DeleteTodo
func NewDeleteTodoRequest(server string, todoId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "todoId", runtime.ParamLocationPath, todoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTodoRequestWithFormdataBody calls the generic UpdateTodo builder with application/x-www-form-urlencoded body
func NewUpdateTodoRequestWithFormdataBody(server string, todoId int32, body UpdateTodoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateTodoRequestWithBody(server, todoId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateTodoRequestWithBody generates requests for UpdateTodo with any type of body
func NewUpdateTodoRequestWithBody(server string, todoId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "todoId", runtime.ParamLocationPath, todoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTodosWithResponse request
	GetTodosWithResponse(ctx context.Context, params *GetTodosParams, reqEditors ...RequestEditorFn) (*GetTodosResponse, error)

	// CreateTodoWithBodyWithResponse request with any body
	CreateTodoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTodoResponse, error)

	CreateTodoWithResponse(ctx context.Context, body CreateTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTodoResponse, error)

	// DeleteTodoWithResponse request
	DeleteTodoWithResponse(ctx context.Context, todoId int32, reqEditors ...RequestEditorFn) (*DeleteTodoResponse, error)

	// UpdateTodoWithBodyWithResponse request with any body
	UpdateTodoWithBodyWithResponse(ctx context.Context, todoId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTodoResponse, error)

	UpdateTodoWithFormdataBodyWithResponse(ctx context.Context, todoId int32, body UpdateTodoFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateTodoResponse, error)
}

type GetTodosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Todo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTodosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTodosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Todo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTodosWithResponse request returning *GetTodosResponse
func (c *ClientWithResponses) GetTodosWithResponse(ctx context.Context, params *GetTodosParams, reqEditors ...RequestEditorFn) (*GetTodosResponse, error) {
	rsp, err := c.GetTodos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTodosResponse(rsp)
}

// CreateTodoWithBodyWithResponse request with arbitrary body returning *CreateTodoResponse
func (c *ClientWithResponses) CreateTodoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTodoResponse, error) {
	rsp, err := c.CreateTodoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTodoResponse(rsp)
}

func (c *ClientWithResponses) CreateTodoWithResponse(ctx context.Context, body CreateTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTodoResponse, error) {
	rsp, err := c.CreateTodo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTodoResponse(rsp)
}

// DeleteTodoWithResponse request returning *DeleteTodoResponse
func (c *ClientWithResponses) DeleteTodoWithResponse(ctx context.Context, todoId int32, reqEditors ...RequestEditorFn) (*DeleteTodoResponse, error) {
	rsp, err := c.DeleteTodo(ctx, todoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTodoResponse(rsp)
}

// UpdateTodoWithBodyWithResponse request with arbitrary body returning *UpdateTodoResponse
func (c *ClientWithResponses) UpdateTodoWithBodyWithResponse(ctx context.Context, todoId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTodoResponse, error) {
	rsp, err := c.UpdateTodoWithBody(ctx, todoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTodoResponse(rsp)
}

func (c *ClientWithResponses) UpdateTodoWithFormdataBodyWithResponse(ctx context.Context, todoId int32, body UpdateTodoFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateTodoResponse, error) {
	rsp, err := c.UpdateTodoWithFormdataBody(ctx, todoId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTodoResponse(rsp)
}

// ParseGetTodosResponse parses an HTTP response from a GetTodosWithResponse call
func ParseGetTodosResponse(rsp *http.Response) (*GetTodosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTodosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTodoResponse parses an HTTP response from a CreateTodoWithResponse call
func ParseCreateTodoResponse(rsp *http.Response) (*CreateTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTodoResponse parses an HTTP response from a DeleteTodoWithResponse call
func ParseDeleteTodoResponse(rsp *http.Response) (*DeleteTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateTodoResponse parses an HTTP response from a UpdateTodoWithResponse call
func ParseUpdateTodoResponse(rsp *http.Response) (*UpdateTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /todos)
	GetTodos(ctx echo.Context, params GetTodosParams) error

	// (POST /todos)
	CreateTodo(ctx echo.Context) error

	// (DELETE /todos/{todoId})
	DeleteTodo(ctx echo.Context, todoId int32) error

	// (PUT /todos/{todoId})
	UpdateTodo(ctx echo.Context, todoId int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodosParams
	// ------------- Required query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, true, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodo(ctx, todoId)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTodo(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todos/:todoId", wrapper.DeleteTodo)
	router.PUT(baseURL+"/todos/:todoId", wrapper.UpdateTodo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/jOAz9KwZ3gb04dZruYeFbdzoY9FRgJnMqikK16EStLakS1TQI/N8Hkuw4id0i",
	"na/OybZEkY+P5LM2UKhaK4mSLOQbsMUSaxZePxqjjH/RRmk0JDAsF4qjf5bK1IwgByHpbAYp0Fpj/MQF",
	"GmhSqNFatgjW7aYlI+QCmiYFg49OGOSQX0efvf3N1pm6u8eCvK+54moMTK0rJOS3HsoOKM4IJyRq7IF1",
	"sVMoDLK3nhH8yKQtMXIBHEpX++yUvF2qikMKK2UevL8UuJK7efZxiNmHEcJScBbNHgTnBB8iPWA2nGq9",
	"brEN+fXHhCwDwxxtYYQmoSTkcKVRnmuRWI2FKEXB/HpSKpOwhBRXCdO6apd9IEGVdzxvt5Kr8y+QwhMa",
	"G/2dnkxPpj4fpVEyLSCHs7CUgma0DMRl3nF4WyANIX1GckbahFVVQksMMP6xiSrDV5ux75IA6pJDDp+Q",
	"5sGnj2JYjYTGQn596Pry4sCN8KuPDs0aUpCs9rm1Wz3NZBym7egcVaLDsKWoCE2XyN06aQs1Hn+72Uf8",
	"jlZrbnwKVitp4yzNptM4UpJQBtp3SpvdW490sxNTENbh4N8GS8jhr6yXkqzVkSyMbbMNzoxh69hu+wws",
	"kLr0O1AQjErmKnoTrtfgRE0bie8kPmssCHmyY6OVHem/D0E+bMISiauAetBv0WQet3yjoKX/FV//tEQi",
	"r8M8wtyRShjngxZtBgU//T14gt562Xjv0mJn06StyGQb/7jkTSyz/5cMCx7XW8Eb1Poi7La1fl1deKcu",
	"raMw3V72+uGOcI6Tl5d+QiOj/e8wK6mSjvj3LkcK2o0M2lfNw6B5xqLoef5eKEM0/vPKcMzsP09Wq9XE",
	"O5w4U6H09yG+z/X+vefXXDKa0XvBPnl9HXYI/KH/yDGy8v4NupOidFUV1iyap67FnKkghyWRzrOsUgWr",
	"lspSfjabTf/LoLlpvgUAAP//gQZy1WoLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
